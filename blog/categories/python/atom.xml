<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Thejdeep]]></title>
  <link href="http://thejdeep.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://thejdeep.github.io/"/>
  <updated>2015-07-05T22:25:02+05:30</updated>
  <id>http://thejdeep.github.io/</id>
  <author>
    <name><![CDATA[Thejdeep Gudivada]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using ConfigParser]]></title>
    <link href="http://thejdeep.github.io/blog/2015/07/02/using-configparser/"/>
    <updated>2015-07-02T19:37:53+05:30</updated>
    <id>http://thejdeep.github.io/blog/2015/07/02/using-configparser</id>
    <content type="html"><![CDATA[<p>So over the past month or so I have been working on some proprietary stuff at Cisco and it had to do something with writing a plugin for the YUM Package Manager, ssshhhhh :) . At the bottom of it, I realised there were a lot of global variables defined and whose initial values were required to be supplied by the end-user and these were subjected to change. So, I decided to have a configuration file which will drive my main YUM plugin. I will tell you why this is better. For the simplicity of this proof, let&rsquo;s just assume that the end-user goes ughhh. over Python and hates to get into the code to change the initial values. I can safely be sure that anyone would be better off changing the key-value pairs in the configuration file than editing the source code. Hence Proved.</p>

<h3>Configuration File</h3>

<p>So my basic configuration file can be anything like this
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[SectionOne]
</span><span class='line'>Name: Thej
</span><span class='line'>Job: Developer
</span><span class='line'>Single: True&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;[SectionTwo]
</span><span class='line'>FavoriteColor : Blue</span></code></pre></td></tr></table></div></figure></p>

<h3>Python driver program</h3>

<p>In my main python file, you can read the configuration file like this
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import ConfigParser
</span><span class='line'>Config = ConfigParser.ConfigParser()
</span><span class='line'>Config.read(&ldquo;~/.path_to_conf_file&rdquo;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Have a helper function that returns to me a dictionary given the name of a section
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def ConfigSectionMap(section):
</span><span class='line'>    dict1 = {}
</span><span class='line'>    options = Config.options(section)
</span><span class='line'>    for option in options:
</span><span class='line'>        try:
</span><span class='line'>            dict1[option] = Config.get(section, option)
</span><span class='line'>            if dict1[option] == -1:
</span><span class='line'>                DebugPrint(&ldquo;skip: %s&rdquo; % option)
</span><span class='line'>        except:
</span><span class='line'>            print(&ldquo;exception on %s!&rdquo; % option)
</span><span class='line'>            dict1[option] = None
</span><span class='line'>    return dict1</span></code></pre></td></tr></table></div></figure>
Now that the call to the helper function returns a dictionary, I can access any value by querying the key</p>

<pre><code>Name = ConfigSectionMap("SectionOne")['name']
</code></pre>
]]></content>
  </entry>
  
</feed>
