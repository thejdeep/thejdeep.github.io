<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: open-source | Thejdeep]]></title>
  <link href="http://thejdeep.github.io/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://thejdeep.github.io/"/>
  <updated>2015-07-05T11:08:08+05:30</updated>
  <id>http://thejdeep.github.io/</id>
  <author>
    <name><![CDATA[Thejdeep Gudivada]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Snapshots and Rollbacks in BTRFS]]></title>
    <link href="http://thejdeep.github.io/blog/2015/07/04/snapshots-and-rollbacks-in-btrfs/"/>
    <updated>2015-07-04T16:51:11+05:30</updated>
    <id>http://thejdeep.github.io/blog/2015/07/04/snapshots-and-rollbacks-in-btrfs</id>
    <content type="html"><![CDATA[<p><strong>Assumption</strong> Your file system is BTRFS. Obviously right ?</p>

<p><strong>Problem Statement</strong> Since I do not know whether an upgrade process will be successful and that I do not want to take chances with it, I need a way to rollback my filesystem to a stable state if in case something occurs and leaves my system in an inconsistent state</p>

<p><strong>Answer</strong> Use BTRFS with its Snapshots/Rollback feature</p>

<h3>BTRFS ah ?</h3>

<p>So BTRFS or Butter FS or B-tree FS is a <a href="https://en.wikipedia.org/wiki/Copy-on-write" target="_blank">CoW (Copy on Write)</a> file system for Linux. It addresses the lack of snapshots, pooling, checksums in Linux File Systems. And its stable now which means you can use it in production. Oracle has been doing it over the years.</p>

<h3>Taking Snapshot of the root file system</h3>

<ul>
<li>Perform all of this as root
<code>
$ sudo su
</code></li>
<li>Get the label of your btrfs volume
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;h1&gt;blkid | grep btrfs&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Create a mount point and mount your btrfs volume</span></code></pre></td></tr></table></div></figure>

<h1>mkdir /test</h1>

<h1>mount -t btrfs -o subvolid=0 LABEL=&ldquo;fedora&rdquo; /test</h1>

<h1>cd /test</h1>

<p>```</p></li>
<li>Take a snapshot of your volume
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;h1&gt;btrfs subvolume snapshot root snap_name&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;You have your snapshot saved as snap_name&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;Rolling back using a snapshot&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;Find the subvolume ID of the snapshot</span></code></pre></td></tr></table></div></figure>

<h1>btrfs subvolume list /test</h1>

<p>```</p></li>
<li>Set your snapshot subvolume ID as the default
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;h1&gt;btrfs subvolume set-default &lt;subvol_id&gt; /.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Remove all the “rootflags=subvol=root” arguments from /boot/grub2/grub.cfg</span></code></pre></td></tr></table></div></figure>

<h1>sed -i &rsquo;s/rootflags=subvol=root //&lsquo; /boot/grub2/grub.cfg</h1>

<p>```</p></li>
<li><p>Thats it, reboot for effect</p></li>
<li><p>You can confirm that you are on the sanpshot by
```</p>

<h1>btrfs subvolume show /.</h1>

<p>```</p></li>
</ul>


<p>Credits : <a href="https://www.variantweb.net/blog/rollback-root-filesystem-using-btrfs/" target="_blank">Seth Jennings</a></p>

<h3>Monolith : YUM plugin</h3>

<p>So, for the TL;DD (Too long didn&rsquo;t do) crowd, I have written a YUM Plugin that does all the above stuff for you when you trigger it with certain commands.</p>

<p>Here&rsquo;s the Github repo <a href="https://github.com/thejdeep/Monolith" target="_blank">link</a>. You can find the installation instructions there.</p>

<p><br/></p>

<h4>Usage</h4>

<p>To take snapshot of the root file system
<code>
$ sudo yum snapshot &lt;snap_name&gt;
</code>
To rollback to a previous snapshot
<code>
$ sudo yum rollback &lt;snap_name&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Package Manager]]></title>
    <link href="http://thejdeep.github.io/blog/2015/07/02/building-a-package-manager/"/>
    <updated>2015-07-02T08:16:09+05:30</updated>
    <id>http://thejdeep.github.io/blog/2015/07/02/building-a-package-manager</id>
    <content type="html"><![CDATA[<p>As a quick weekend hack, I built a tiny package manager called <strong>spm</strong> (Please don&rsquo;t ask me to abbreviate it) which uses <a href="https://github.com/rpm-software-management/hawkey" target="_blank">Hawkey</a> and <a href="https://github.com/tojaj/librepo" target="_blank">Librepo</a> for its dependency resolution and for downloading repository metadata. If you are familiar with DNF, then you might reach a conclusion that this sounds exactly like it, but, my main intention was to build a scaled down version of DNF. I have to confess that this is no where closer to DNF in terms of the feature set. Eventually, you will agree too.</p>

<p>So, I am <strong>open-sourcing</strong> it. Feel free to add to it and send me a PR. You can find the repository <a href="https://github.com/thejdeep/spm" target="_blank">here</a></p>

<p>I will outline the steps that went into building spm so that you can build one too :</p>

<ul>
<li><p>Have a <strong>shell script</strong> that handles all your pre-execution steps like verbose printing and all. For example, this is the <em>install</em> pre-processing step that happens as defined in my shell script. <em>Notice how I am calling my main python driver program on line 8 for execution</em>
<code>
if [ "$#" -eq 2 ] &amp;&amp; [ "$1" == "install" ] ; then
  echo ""
  echo "SPM"
  echo ""
  echo "-----------------"
  echo "Install operation"
  echo "-----------------"
  echo `python /home/thejdeep/install.py $1 $2`
else
  echo ""
  echo "Correct Usage : spm install &lt;pkg_name&gt;"
  echo ""
fi
</code></p></li>
<li><p>In my main python program, have <strong>Hawkey</strong> configured to read my local repository. A brilliant tutorial that can help you do this can be found <a href="http://hawkey.readthedocs.org/en/latest/tutorial-py.html#loading-repositories" target="_blank">here</a>. Also, use it to perform dependency resolution as shown <a href="http://hawkey.readthedocs.org/en/latest/tutorial-py.html#resolving-things-with-goals" target="_blank">here</a></p></li>
<li><p>I have <strong>librepo</strong> set up to download the packages for me. Lifted this part of the code from <a href="https://github.com/Tojaj/librepo/blob/master/examples/python/download_package.py" target="_blank">here</a></p></li>
<li><p>Now that I have the packages downloaded, I can safely install them using faithful ol' <em>RPM</em> :)
<code>
print "Installing packages"
print "-------------------"
cmd_ins = "sudo rpm -ivh " + pkg_url
subprocess.call(cmd_ins,shell=True)
</code></p></li>
<li>The other operations can be implemented in a similar way</li>
</ul>


<h3>TODO</h3>

<ul>
<li><p>Fix dependency resolution. Right now, spm works correct only for packages that do not have dependencies. <a href="https://github.com/thejdeep/spm/issues/1" target="_blank">Github Issue 1</a></p></li>
<li><p>Support installing multiple packages and all. Package names can be supplied as strings delimited by space to the install command. <a href="https://github.com/thejdeep/spm/issues/2" target="_blank">Github Issue 2</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
