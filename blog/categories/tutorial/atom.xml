<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | Thejdeep]]></title>
  <link href="http://thejdeep.github.io/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://thejdeep.github.io/"/>
  <updated>2015-07-05T22:20:26+05:30</updated>
  <id>http://thejdeep.github.io/</id>
  <author>
    <name><![CDATA[Thejdeep Gudivada]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Packaging software as RPM's]]></title>
    <link href="http://thejdeep.github.io/blog/2015/07/03/packaging-software-as-rpms/"/>
    <updated>2015-07-03T21:26:22+05:30</updated>
    <id>http://thejdeep.github.io/blog/2015/07/03/packaging-software-as-rpms</id>
    <content type="html"><![CDATA[<p>There are times when you want to package software you have written and distribute it to others so that they can have it too. In this post, lets see how we can build a RPM for your software, which basically boils down to writing a SPEC file.</p>

<ul>
<li>Before we get into the nitty-gritty details of this, make sure you have the core development tools installed. You can do this by
<code>
$ sudo yum install rpmdevtools
</code>
<blockquote><p>NOTE : You should NEVER create your packages as the root user. Building RPM&rsquo;s as root is dangerous, because the binary files are installed on the system before being packaged, thus you must always build as normal user so you won&rsquo;t accidentally pollute your system. Create a new user for your package development tasks if you wish. Later don&rsquo;t tell me I didn&rsquo;t warn you :)</p><footer><strong><a href="https://fedoraproject.org/wiki/How_to_create_an_RPM_package#Preparing_your_system" target="_blank">Source</a></strong></footer></blockquote></li>
<li>Create the required directory structure for creating a package by running the following command
<code>
$ rpmdev-setuptree
</code></li>
<li>You can now notice that ~/rpmbuild/ directory is created along with a few sub-folders inside</li>
<li>Now that the prerequisites are ready, we can go into actually building the package</li>
<li><em>Here&rsquo;s what I want to do</em> : I have a couple of files which I need to package. Eventually, when someone installs the package, I need those files to be copied to their respective locations. Simple ?</li>
<li>Create a <em>tar.gz</em> package containing all the files you want to package and move it to ~/rpmbuild/SOURCES/ folder.
<code>
$ mkdir ~/pkg_name
$ cd pkg_name
$ cp ~/file_1_location .
$ cp ~/file_2_location .
$ cp ~/file_3_location .
$ cd ..
$ tar cf pkg_name.tar.gz pkg_name
$ mv pkg_name.tar.gz ~/rpmbuild/SOURCES/
</code></li>
<li>Next, create a spec file in your ~/rpmbuild/SPECS directory
<code>
$ vi ~/rpmbuild/SPECS/pkg_name.spec
</code></li>
<li>My final spec file is going to look like this. Will explain in detail in a bit
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Name: pkg_name        &lt;br/&gt;
</span><span class='line'>Version: 1     &lt;br/&gt;
</span><span class='line'>Release:        1%{?dist}
</span><span class='line'>Summary:   RPM package testing&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;License:        GPL
</span><span class='line'>URL:       None   &lt;br/&gt;
</span><span class='line'>Source0:  pkg_name.tar.gz&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;%description
</span><span class='line'>Testing out packaging&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;%prep
</span><span class='line'>%setup -n pkg_name&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;%install
</span><span class='line'>rm -rf &ldquo;$RPM_BUILD_ROOT&rdquo;
</span><span class='line'>mkdir -p &ldquo;$RPM_BUILD_ROOT/etc/&rdquo;
</span><span class='line'>mkdir -p &ldquo;$RPM_BUILD_ROOT/etc/yum.repos.d/&rdquo;
</span><span class='line'>mkdir -p &ldquo;$RPM_BUILD_ROOT/usr/lib/yum-plugins/&rdquo;
</span><span class='line'>cp cisco_yum.conf &ldquo;$RPM_BUILD_ROOT/etc/&rdquo;
</span><span class='line'>cp test.repo &ldquo;$RPM_BUILD_ROOT/etc/yum.repos.d/&rdquo;
</span><span class='line'>cp test.py &ldquo;$RPM_BUILD_ROOT/usr/lib/yum-plugins/&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;%files
</span><span class='line'>/etc/
</span><span class='line'>/usr/lib/yum-plugins/&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;%clean
</span><span class='line'>rm -rf $RPM_BUILD_ROOT&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;%changelog</span></code></pre></td></tr></table></div></figure>
Will briefly explain what those lines in the spec file mean (skipping all the self explanatory ones)</p>

<p><em>Name</em> = Name of the package which should match the spec file name as well</p>

<p><em>%prep</em> = Commands to uncompress the program so as to make it build-ready</p>

<p><em>%setup</em> = To say what my archive unpacks to</p>

<p><em>%install</em> = Commands to install the program. To copy files from build dir to buildroot dir</p>

<p><em>%files</em> = List fo the files that will be installed</p>

<ul>
<li><p>So, thats it guys. Now that you have the spec file ready, just run this command
<code>
$ rpmbuild -v -bb ~/rpmbuild/SPECS/pkg_name.spec
</code></p></li>
<li><p>After some such verbose printing, you will(might :/) have your built RPM in ~/rpmbuild/RPMS/<your_arch>/ . Ta-da ! :)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ConfigParser]]></title>
    <link href="http://thejdeep.github.io/blog/2015/07/02/using-configparser/"/>
    <updated>2015-07-02T19:37:53+05:30</updated>
    <id>http://thejdeep.github.io/blog/2015/07/02/using-configparser</id>
    <content type="html"><![CDATA[<p>So over the past month or so I have been working on some proprietary stuff at Cisco and it had to do something with writing a plugin for the YUM Package Manager, ssshhhhh :) . At the bottom of it, I realised there were a lot of global variables defined and whose initial values were required to be supplied by the end-user and these were subjected to change. So, I decided to have a configuration file which will drive my main YUM plugin. I will tell you why this is better. For the simplicity of this proof, let&rsquo;s just assume that the end-user goes ughhh. over Python and hates to get into the code to change the initial values. I can safely be sure that anyone would be better off changing the key-value pairs in the configuration file than editing the source code. Hence Proved.</p>

<h3>Configuration File</h3>

<p>So my basic configuration file can be anything like this
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[SectionOne]
</span><span class='line'>Name: Thej
</span><span class='line'>Job: Developer
</span><span class='line'>Single: True&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;[SectionTwo]
</span><span class='line'>FavoriteColor : Blue</span></code></pre></td></tr></table></div></figure></p>

<h3>Python driver program</h3>

<p>In my main python file, you can read the configuration file like this
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import ConfigParser
</span><span class='line'>Config = ConfigParser.ConfigParser()
</span><span class='line'>Config.read(&ldquo;~/.path_to_conf_file&rdquo;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Have a helper function that returns to me a dictionary given the name of a section
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def ConfigSectionMap(section):
</span><span class='line'>    dict1 = {}
</span><span class='line'>    options = Config.options(section)
</span><span class='line'>    for option in options:
</span><span class='line'>        try:
</span><span class='line'>            dict1[option] = Config.get(section, option)
</span><span class='line'>            if dict1[option] == -1:
</span><span class='line'>                DebugPrint(&ldquo;skip: %s&rdquo; % option)
</span><span class='line'>        except:
</span><span class='line'>            print(&ldquo;exception on %s!&rdquo; % option)
</span><span class='line'>            dict1[option] = None
</span><span class='line'>    return dict1</span></code></pre></td></tr></table></div></figure>
Now that the call to the helper function returns a dictionary, I can access any value by querying the key</p>

<pre><code>Name = ConfigSectionMap("SectionOne")['name']
</code></pre>
]]></content>
  </entry>
  
</feed>
